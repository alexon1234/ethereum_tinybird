NODE transactions_per_day
SQL >

    SELECT 
      toDate(block_timestamp) AS day, 
      count() AS number_transactions, 
      joinGet('ETH_USD_join_by_day','price', day) AS eth_usd, 
      round(avg(gas_used * (gas_price / exp10(18))) * eth_usd, 2) AS `avg_tx_fee_$`, 
      round(max(gas_used * (gas_price / exp10(18))) * eth_usd, 2) AS `max_tx_fee_$`, 
      round(min(gas_used * (gas_price / exp10(18))) * eth_usd, 2) AS `min_tx_fee_$`
    FROM transactions 
    GROUP BY day, eth_usd
    ORDER BY day ASC

NODE top_10_most_expensive_transactions
SQL > 

  SELECT 
    hash,
    toDate(block_timestamp) as day,
    joinGet('ETH_USD_join_by_day', 'price', day) AS eth_usd, 
    round(gas_used * (gas_price / exp10(18)) * eth_usd, 2) AS `fee_in_$`
  FROM transactions
  ORDER BY `fee_in_$` DESC
  LIMIT 10

NODE Miner_pools_with_more_hashrate_power
DESCRIPTION> 
  Transactions with zero fee and the miner who add them to the block.
SQL >
  SELECT 
    joinGet(blocks_join_by_number, 'miner', block_number) AS miner, 
    countIf(miner = from_address or miner = to_address) AS txs_to_miners_inside_pool,
    countIf(miner != from_address and to_address != miner ) AS external_accounts,    
    txs_to_miners_inside_pool + external_accounts as total
  FROM transactions
  WHERE gas_price = 0
  GROUP BY miner
  ORDER BY external_accounts DESC



NODE Accounts_using_the_network_for_free
DESCRIPTION> 
  These are the most frequent addresses that are using the network with a cost of 0
SQL> 

  SELECT 
    from_address,
    joinGet(blocks_join_by_number, 'miner', block_number) AS miner,
    count() as tx
  FROM transactions 
  WHERE
    from_address != miner AND
    to_address != miner AND
    gas_price <= 1000000000 -- 1 Gwei 
  GROUP BY from_address, miner
  ORDER BY tx DESC

NODE Top_30_most_used_addresses_bad_optimize
DESCRIPTION> 
  We try to get the top 30 most used addresses using standard SQL
SQL >

  WITH(
    SELECT COUNT(*) FROM transactions
  ) as total

  SELECT 
      address,
      COUNT(*) as number_transactions,
      round(number_transactions/total*100,2) as percentatge
  FROM (
      SELECT from_address as address FROM transactions
      UNION ALL
      SELECT to_address as address FROM transactions
  )
  GROUP BY address
  ORDER BY number_transactions DESC
  LIMIT 30

NODE Top_30_most_used_addresses_optimize
DESCRIPTION>
  A more optimize query to get the top 30 most used addresses 
SQL >

  WITH(
    SELECT 
      arrayMap(x -> cityHash64(x), arrayConcat(topK(20)(from_address), topK(20)(to_address))),
      count()
    FROM transactions
  ) AS tr


  SELECT
    address,
    count() as number_transactions,
    round(number_transactions/tupleElement(tr,2)*100, 2) as percentatge
  FROM (
    SELECT from_address as address FROM transactions 
    UNION ALL
    SELECT to_address   as address FROM transactions
  )
  WHERE has(tupleElement(tr,1), sipHash64(address))
  GROUP BY address
  ORDER BY number_transactions DESC
  LIMIT 30


